PyDataTable is intended to provide a representation similar to a database table - a list of table rows 
	where each row contains a set of key-value pairs, sharing common keys (internally represented by a 
	list of dicts).  It includ several capabilities common to database tables as well as many other 
	nice-to-have capabilities.  
Some of the capabilities include:	
	Selecting columns - including filtering selected columns by column content and adding columns 
		populated by the result of some expression
	Filtering rows by some criteria
	Joining multiple tables (including database table-join, and concatenating rows)
	bucketing and aggregating of bucketed results
	de-duplication (e.g. select distinct)
	sorting
	diffing of two tables
Table headers should be strings.  Values stored may be of any type.
	
Includes the following modules:
* datatable - the main DataTable module as describbed above
* datatable_alt - an alternative representation of the DataTable intended to cut down on memory usage
	Replaces the list-of-dict model with a dict-of-lists model.  This comes with some trade-offs in
	terms of performance (some operations may be faster, some will be slower), but otherwise the 
	capabilities are the same
* hierarchies - an alternative hierarchical representation of data - each level in the hierarchy is
	a specific key with the nodes of that level containing the values for that key.
* datatable_diff - module used for diffing two DataTable objects.
* myxml - pythonic xml parser/representation that I wrote, representing the xml document as a collection
	of nodes, attributes accessible using bracket-notation, and children using dot-notation.  
	Includes searching for children and desendents and filtering of collected nodes.
	Used by DataTable primarily for xml (de)serialization (may not be the best too for the job - open to 
	suggestions).
